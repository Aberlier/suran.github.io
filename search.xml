<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>向所有奋战一线的白衣天使致敬</title>
    <url>/2020/02/17/%E5%90%91%E6%89%80%E6%9C%89%E5%A5%8B%E6%88%98%E4%B8%80%E7%BA%BF%E7%9A%84%E7%99%BD%E8%A1%A3%E5%A4%A9%E4%BD%BF%E8%87%B4%E6%95%AC/</url>
    <content><![CDATA[<h1 id="向所有奋战在一线的白衣天使致敬♥"><a href="#向所有奋战在一线的白衣天使致敬♥" class="headerlink" title=" 向所有奋战在一线的白衣天使致敬♥"></a><center> 向所有奋战在一线的白衣天使致敬♥</center></h1><p>​       2020年，是开局之年，是决胜之年，是具有里程碑意义的一年，在2019年12月31日习主席发表的新年贺词中，我感受到了祖国的日益强大，感受到希望和胜利就在眼前。短短的几十分钟，却让我内心波涛翻涌，犹如一股暖流、一股力量突然间注入到我的身体，久久不能平复。“ 我们用汗水浇灌收获，以实干笃定前行”,” 冲锋号已经吹响。我们要万众一心加油干，越是艰险越向前，把短板补得再扎实一些，把基础打得再牢靠一些。”,” 让我们只争朝夕，不负韶华 。”这些铿锵有力的金句让我时刻铭记，听的时候豪情万丈、信心满怀，听过之后发人深思，耐人寻味，萦绕耳畔。本想2020年正是大好的发展之年，奋进之年，可不曾想，新冠状病毒的出现，使祖国母亲处于病痛的折磨之中，其”子“武汉更是病入膏肓，奄奄一息。从1月底到现在，武汉是病毒的发源地也是感染的集中地，通过新闻和网上我见证了病毒由小到大的扩散和蔓延，同时也看到了无数白衣天使奔往武汉的真情流露，他们是天使，更是战士，手中没有枪和炮，有的是那透明却不透气的橡胶手套，身上没有防弹衣，有的是层层厚重而又紧密的防护服，没有人向他们吹起前进的号角，他们只有听从自己内心的声音，那就是“若有战，召必回，中国必胜，武汉加油！”</p>
<img class="lozad" title="武汉挺住中国加油" data-src="/2020/02/17/%E5%90%91%E6%89%80%E6%9C%89%E5%A5%8B%E6%88%98%E4%B8%80%E7%BA%BF%E7%9A%84%E7%99%BD%E8%A1%A3%E5%A4%A9%E4%BD%BF%E8%87%B4%E6%95%AC/%E6%AD%A6%E6%B1%89%E6%8C%BA%E4%BD%8F%E4%B8%AD%E5%9B%BD%E5%8A%A0%E6%B2%B9.png"> 

<p>​        从来没有想过自己会有一天如此担忧祖国的安危，以前都是祖国护我，到现在我却想守护祖国，保护祖国，救祖国于病魔之中。每天一觉醒来就会打开微博，关注疫情动态，期盼着哪一天热搜上会出现国泰民安，病毒退散，情况好转的字眼。从疫情的开始到近些日子，我看到许许多多的医护人员不畏疫情的魔抓，力争在魔抓之下救出被疫情所折磨的平凡众生，但他们却忘了一点，那就是他们也是平凡的人，也是血肉之躯，也是平凡人里的其中一员。很多医务人员在救治其他伤员的过程中受到感染，拖着沉重的身体依然不忘前线的救治情况，在进行隔离的同时依然没有忘记自己是一名医生，时刻与前线的同事保持联络，哪怕在死亡的最后一刻，他们也是愿意为人民带来了生的希望，哪怕自己牺牲，这就是一种使命，一种担当，一份责任，这就是初心。</p>
<p>​       “自古雄才多磨难，从来纨绔少伟男”，中国的这个磨难是对我国的一项重大挑战，同时也是对我国的医护人员的重大挑战。自2003年非典起，我国对防疫工作尤为重视，可以说在这一方面已经拥有一定的防治手段，彻底根除新型冠状病毒的那一天必将指日可待。疫情发生以来，我记住了这两个名字，钟南山、李文亮，并不是说其他的医护人员没有这二人业绩突出，而是这二人在中国乃至世界都彰显了白衣天使的大无畏精神，身先士卒的崇高魅力。</p>
<p>​        钟南山院士想必大家都不陌生，一位84岁的中国科学院院士，在疫情爆发的时候，他提醒大家不要去武汉，做好防护，可他却在18日傍晚义无反顾的只身前往武汉防疫的最前线，就是这一种牺牲小我成就大我的精神，使其在抗战非典的非常时期，能够无畏疾病之危，守住民族之魂。我们要感谢钟南山院士，在《新闻1+1》中他提醒广大人民群众，戴口罩，没有特殊情况不要去武汉，坦言有人传人的现象，同时有医务人员的感染，但对新型冠状病毒的了解还是不够具体化。短短几句，干货十足，没有半点像“黄冈卫健委主任”那般弄虚作假。从1月18日起，钟南山院士就辗转于多个城市，武汉、北京、广州等等，解答疑惑，摸清疫情的实情，对新型冠状病毒的态势及发展进行了密切的关注。有人把它称为“神”，他却说“自己不过是普普通通的看病的大夫”。低调的为人往往背后蕴含着强大的力量。现在网上一直再传，“火神山、雷神山、钟南山，三山齐聚克难关。”可见人们对钟南山院士的呼声是多么的高涨，同时又寄托着人民质朴而又真挚的情感与期待。</p>
<img class="lozad" title="钟南山院士" data-src="/2020/02/17/%E5%90%91%E6%89%80%E6%9C%89%E5%A5%8B%E6%88%98%E4%B8%80%E7%BA%BF%E7%9A%84%E7%99%BD%E8%A1%A3%E5%A4%A9%E4%BD%BF%E8%87%B4%E6%95%AC/%E9%92%9F%E5%8D%97%E5%B1%B1.jpg"> 

<p>​       “人面不知何处去，桃花依旧笑春风 ”。李文亮是最早接触新型冠状病毒的医生，他在疫情的初期就及时向外界发处了防护预警，网友都叫他“吹哨人”。确实，没有吹哨人的吹哨，哪有目前大部分人的安全，他始终坚守岗位，在于疫情斗争的同时，积极配合医院的治疗，保持良好的心态，很想早日恢复，再次投入到一线的工作当中，能够继续看病，从其身上我们看到了闪耀在医生身上的医德之光，是医护人员的模范代表，是我们身边最为可敬的英雄。可不幸的是，年仅34岁的他，最终不幸逝世，令人痛惜。苏秦有话“且使我有洛阳二倾田，安能配六国相印?”,李文亮正是没有隐瞒实情，不顾自身的安危，及时拉响了防疫的警笛，救人民于病魔之中，才取得了人民的拥护，受到世界卫生组织的表扬。战胜疫情是对逝者最好的告慰，我相信中国有这种实力，五千年的沧桑岁月，历朝历代都在变化，但不变的是民族的信仰，人民的力量。</p>
<img class="lozad" title="李文亮" data-src="/2020/02/17/%E5%90%91%E6%89%80%E6%9C%89%E5%A5%8B%E6%88%98%E4%B8%80%E7%BA%BF%E7%9A%84%E7%99%BD%E8%A1%A3%E5%A4%A9%E4%BD%BF%E8%87%B4%E6%95%AC/%E6%9D%8E%E6%96%87%E4%BA%AE.jpg"> 

<p>​        疾风知劲草，烈火炼真金。广大医务工作者在一线仍在奋斗，对病魔抗争的脚步不敢停歇，我们希望国家能够加强对这些白衣天使的扶持和帮助，积极的帮助他们解决实际的问题，“兵马未动，粮草先行。”现在医生就是这疫情战场上的士兵，保护好”粮草“就是为“士兵”做好充足的后勤保障。顽强的意志力加上强大的精神力量，这些白衣天使们守护者我们的家园。目前有党中央坚强领导，有广大医务人员全力以赴，有人民不畏艰难的信心，有必胜的决心，所以我们一定能够打赢这场疫情防控的人民战争、总体战、阻击战！</p>
<img class="lozad" title="撰稿人：张杨" data-src="/2020/02/17/%E5%90%91%E6%89%80%E6%9C%89%E5%A5%8B%E6%88%98%E4%B8%80%E7%BA%BF%E7%9A%84%E7%99%BD%E8%A1%A3%E5%A4%A9%E4%BD%BF%E8%87%B4%E6%95%AC/bottum.png"> ]]></content>
      <categories>
        <category>新型冠状病毒</category>
        <category>中国武汉</category>
      </categories>
      <tags>
        <tag>白衣天使</tag>
        <tag>新型冠状病毒</tag>
      </tags>
  </entry>
  <entry>
    <title>git理解分析</title>
    <url>/2019/12/13/git%E7%90%86%E8%A7%A3%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="对git进行了一个分析，讲图保存一下，对于一些基本的命令附上链接吧"><a href="#对git进行了一个分析，讲图保存一下，对于一些基本的命令附上链接吧" class="headerlink" title="对git进行了一个分析，讲图保存一下，对于一些基本的命令附上链接吧"></a>对git进行了一个分析，讲图保存一下，对于一些基本的命令附上链接吧</h3><p><a href="https://baijiahao.baidu.com/s?id=1611550648685439298&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1611550648685439298&amp;wfr=spider&amp;for=pc</a><br>下面是Hexo为了方面自己记录一下<br><a href="https://www.jianshu.com/p/a2d298e26dcd" target="_blank" rel="noopener">https://www.jianshu.com/p/a2d298e26dcd</a></p>
<img class="lozad" data-src="/2019/12/13/git%E7%90%86%E8%A7%A3%E5%88%86%E6%9E%90/git.jpg"> ]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>超好的一个Ddmo</title>
    <url>/2019/12/09/%E8%B6%85%E5%A5%BD%E7%9A%84%E4%B8%80%E4%B8%AADemo/</url>
    <content><![CDATA[<p> <a href="https://blog.csdn.net/noaman_wgs/article/details/79503559" target="_blank" rel="noopener">https://blog.csdn.net/noaman_wgs/article/details/79503559</a> </p>
]]></content>
      <categories>
        <category>Spring</category>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>解决SSM项目打包没有.xml文件的问题</title>
    <url>/2019/12/09/%E8%A7%A3%E5%86%B3SSM%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%B2%A1%E6%9C%89-xml%E6%96%87%E4%BB%B6%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="解决SSM项目打包没有-xml文件的问题"><a href="#解决SSM项目打包没有-xml文件的问题" class="headerlink" title="解决SSM项目打包没有.xml文件的问题"></a>解决SSM项目打包没有.xml文件的问题</h2><p>IDEA的maven项目中，默认源代码目录下（src/main/java目录）的xml等资源文件并不会在编译的时候一块打包进classes文件夹，而是直接舍弃掉。如果使用的是Eclipse，Eclipse的src目录下的xml等资源文件在编译的时候会自动打包进输出到classes文件夹。</p>
<p>示例：</p>
<p>当在IDEA中使用MyBatis时，一般会创建一个SQL映射的配置文件，这个文件如果是在src/main/java目录下，编译后在target目录下是找不到这个文件的</p>
<img class="lozad" data-src="/2019/12/09/%E8%A7%A3%E5%86%B3SSM%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%B2%A1%E6%9C%89-xml%E6%96%87%E4%BB%B6%E7%9A%84%E9%97%AE%E9%A2%98/001.png"> 

<p>对于IDEA的这个问题，有如下的解决办法：</p>
<p><strong>第一种方法：如果没有特殊业务，不需要指定资源文件定位到src/main/java下，则可以在src下创建main/resources目录，并将所需要的xml资源文件放置其中即可。maven工具默认在编译的时候，会将resources文件夹中的资源文件一块打包进classes目录中。</strong></p>
<img class="lozad" data-src="/2019/12/09/%E8%A7%A3%E5%86%B3SSM%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%B2%A1%E6%9C%89-xml%E6%96%87%E4%BB%B6%E7%9A%84%E9%97%AE%E9%A2%98/002.png"> 

<p> 对于MyBatis的这种使用方式，我们必须在配置文件中指定mapper.xml文件的位置，例如在springboot项目中，在application.properties中增加： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mybatis.mapper-locations=classpath:mapper/*.xml</span><br></pre></td></tr></table></figure>

<p> 如果是普通的ssm项目，则这样配置： </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"druidDataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置mapper文件的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <strong>第二种方法：配置maven的pom文件配置，在pom文件中找到节点，添加下列代码：</strong> </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;  </span><br><span class="line">  &lt;configreation&gt;</span><br><span class="line">    &lt;resources&gt;  </span><br><span class="line">    &lt;!-- mapper.xml文件在java目录下 --&gt;</span><br><span class="line">    &lt;resource&gt;  </span><br><span class="line">      &lt;directory&gt;src/main/java&lt;<span class="regexp">/directory&gt;  </span></span><br><span class="line"><span class="regexp">        &lt;includes&gt;  </span></span><br><span class="line"><span class="regexp">          &lt;include&gt;**/</span>*.xml&lt;<span class="regexp">/include&gt;  </span></span><br><span class="line"><span class="regexp">        &lt;/i</span>ncludes&gt;  </span><br><span class="line">    &lt;<span class="regexp">/resource&gt;  </span></span><br><span class="line"><span class="regexp">    &lt;!-- mapper.xml文件在resources目录下--&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!--&lt;resource&gt;</span></span><br><span class="line"><span class="regexp">        &lt;directory&gt;src/m</span>ain/resources&lt;<span class="regexp">/directory&gt; </span></span><br><span class="line"><span class="regexp">    &lt;/</span>resource&gt;--&gt;</span><br><span class="line">  &lt;<span class="regexp">/resources&gt;</span></span><br><span class="line"><span class="regexp"> &lt;/</span>configreation&gt;</span><br><span class="line">&lt;<span class="regexp">/build&gt;</span></span><br></pre></td></tr></table></figure>

<p>同时在编译的时候一定要注意，可以采用在IDEA中快速找到项目的路径，在路径中按SHIFT+右击，在此处打开命令行，输入<strong>mvn clean install</strong> 命令，进行清理并重新编译，看taglib中是否存在.xml文件</p>
<img class="lozad" data-src="/2019/12/09/%E8%A7%A3%E5%86%B3SSM%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%B2%A1%E6%9C%89-xml%E6%96%87%E4%BB%B6%E7%9A%84%E9%97%AE%E9%A2%98/003.png"> 

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Oracle数据库并创建账户</title>
    <url>/2019/12/05/%E5%AE%89%E8%A3%85Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%88%9B%E5%BB%BA%E8%B4%A6%E6%88%B7/</url>
    <content><![CDATA[<p>大家可以根据自己的操作系统是多少位（32位或64位）的，到官网下载相应的安装程序，如下图所示。有一点需要注意，Oracle的安装程序分成2个文件，下载后将2个文件解压到同一目录即可。其实用一个也可以，今天刘姐给了我一个压缩包，就一个文件  <strong>orcale11g  win64_11gR2_database</strong> 也可以进行数据库的安装，文件链接地址如下：</p>
<h3 id="Oracle11g"><a href="#Oracle11g" class="headerlink" title="Oracle11g"></a>Oracle11g</h3><p>首先先对Oracle进行一个系统的了解， Oracle 10g，这个g代表Grid。而Oracle8i、Oracle9i中的i代表Internet。作为全球最大的企业软件供应商，Oracle为什么要舍i取g？i是internet的意思，Oracle8和9都是i，表明当时是internet概念盛行的年代，oracle为了迎合当时环境，而做出的internet方面的改进。g是grid网格运算，当时也是非常火的，10g和11g就是oracle为了迎合<a href="https://www.baidu.com/s?wd=分布式计算&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">分布式计算</a>而做出的变化。<br>现在都是c了，c是cloud表明云计算的意思。 </p>
<h3 id="安装Oracle"><a href="#安装Oracle" class="headerlink" title="安装Oracle"></a>安装Oracle</h3><p>在安装前如果报如下错误的话就要添加一段话，</p>
<img class="lozad" title="安装前报错" data-src="/2019/12/05/%E5%AE%89%E8%A3%85Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%88%9B%E5%BB%BA%E8%B4%A6%E6%88%B7/%E5%AE%89%E8%A3%85%E5%89%8D%E6%8A%A5%E9%94%99.png"> 

<p>具体如何操作见链接–&gt; <img alt="img" data-src="file:///C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTencent%5CQQTempSys%W@GJ$ACOF(TYDYECOKVDYB.png)https://blog.csdn.net/OscaronMar/article/details/82290026?from=singlemessage" class="lozad"></p>
<p>安装在这里就不详细介绍了 还是看链接吧，比我讲的要清楚的多–&gt; <a href="https://jingyan.baidu.com/article/363872eccfb9266e4aa16f5d.html" target="_blank" rel="noopener"></a></p>
<h3 id="测试一下通不通"><a href="#测试一下通不通" class="headerlink" title="测试一下通不通"></a>测试一下通不通</h3><p>首先我们可以打开命令行 窗口键+R –&gt;cmd 在里面输入 <strong>sqlplus / as sysdb</strong> 命令，就会显示我们的数据库的各种操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  Microsoft Windows [版本 10.0.17763.864]</span><br><span class="line">(c) 2018 Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;sqlplus / as sysdb</span><br><span class="line"></span><br><span class="line">SQL*Plus: Release 11.2.0.1.0 Production</span><br><span class="line"></span><br><span class="line">Copyright (c) 1982, 2010, Oracle.  All rights reserved.</span><br><span class="line"></span><br><span class="line">使用 SQL*Plus 执行 SQL, PL/SQL 和 SQL*Plus 语句。</span><br><span class="line"></span><br><span class="line">用法 1: sqlplus -H | -V</span><br><span class="line"></span><br><span class="line">    -H             显示 SQL*Plus 版本和</span><br><span class="line">                   用法帮助。</span><br><span class="line">    -V             显示 SQL*Plus 版本。</span><br><span class="line"></span><br><span class="line">用法 2: sqlplus [ [&lt;option&gt;] [&#123;logon | /nolog&#125;] [&lt;start&gt;] ]</span><br><span class="line"></span><br><span class="line">  &lt;option&gt; 为: [-C &lt;version&gt;] [-L] [-M &quot;&lt;options&gt;&quot;] [-R &lt;level&gt;] [-S]</span><br><span class="line"></span><br><span class="line">    -C &lt;version&gt;   将受影响的命令的兼容性设置为</span><br><span class="line">                   &lt;version&gt; 指定的版本。该版本具有</span><br><span class="line">                   &quot;x.y[.z]&quot; 格式。例如, -C 10.2.0</span><br><span class="line">    -L             只尝试登录一次, 而不是</span><br><span class="line">                   在出错时再次提示。</span><br><span class="line">    -M &quot;&lt;options&gt;&quot; 设置输出的自动 HTML 标记。选项</span><br><span class="line">                   的格式为:</span><br><span class="line">                   HTML [ON|OFF] [HEAD text] [BODY text] [TABLE text]</span><br><span class="line">                   [ENTMAP &#123;ON|OFF&#125;] [SPOOL &#123;ON|OFF&#125;] [PRE[FORMAT] &#123;ON|OFF&#125;]</span><br><span class="line">    -R &lt;level&gt;     设置受限模式, 以禁用与文件系统交互的</span><br><span class="line">                    SQL*Plus 命令。级别可以</span><br><span class="line">                   是 1, 2 或 3。最高限制级别为 -R 3, 该级别</span><br><span class="line">                   禁用与文件系统交互的</span><br><span class="line">                   所有用户命令。</span><br><span class="line">    -S             设置无提示模式, 该模式隐藏</span><br><span class="line">                   命令的 SQL*Plus 标帜, 提示和回显</span><br><span class="line">                   的显示。</span><br><span class="line"></span><br><span class="line">  &lt;logon&gt; 为: &#123;&lt;username&gt;[/&lt;password&gt;][@&lt;connect_identifier&gt;] | / &#125;</span><br><span class="line">              [AS &#123;SYSDBA | SYSOPER | SYSASM&#125;] [EDITION=value]</span><br><span class="line"></span><br><span class="line">    指定数据库帐户用户名, 口令和数据库连接</span><br><span class="line">    的连接标识符。如果没有连接</span><br><span class="line">    标识符, SQL*Plus 将连接到默认数据库。</span><br><span class="line"></span><br><span class="line">    AS SYSDBA, AS SYSOPER 和 AS SYSASM 选项是数据库</span><br><span class="line">    管理权限。</span><br><span class="line"></span><br><span class="line">    &lt;connect_identifier&gt; 的形式可以是 Net 服务名</span><br><span class="line">    或轻松连接。</span><br><span class="line"></span><br><span class="line">      @[&lt;net_service_name&gt; | [//]Host[:Port]/&lt;service_name&gt;]</span><br><span class="line"></span><br><span class="line">        &lt;net_service_name&gt; 是服务的简单名称, 它解析</span><br><span class="line">        为连接描述符。</span><br><span class="line"></span><br><span class="line">        示例: 使用 Net 服务名连接到数据库, 且</span><br><span class="line">                 数据库 Net 服务名为 ORCL。</span><br><span class="line"></span><br><span class="line">           sqlplus myusername/mypassword@ORCL</span><br><span class="line"></span><br><span class="line">        Host 指定数据库服务器计算机的主机名或 IP</span><br><span class="line">        地址。</span><br><span class="line"></span><br><span class="line">        Port 指定数据库服务器上的监听端口。</span><br><span class="line"></span><br><span class="line">        &lt;service_name&gt; 指定要访问的数据库的</span><br><span class="line">        服务名。</span><br><span class="line"></span><br><span class="line">        示例: 使用轻松连接连接到数据库, 且</span><br><span class="line">                 服务名为 ORCL。</span><br><span class="line"></span><br><span class="line">           sqlplus myusername/mypassword@Host/ORCL</span><br><span class="line"></span><br><span class="line">    /NOLOG 选项可启动 SQL*Plus 而不连接到</span><br><span class="line">    数据库。</span><br><span class="line"></span><br><span class="line">    EDITION 指定会话版本的值。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;start&gt; 为: @&lt;URL&gt;|&lt;filename&gt;[.&lt;ext&gt;] [&lt;parameter&gt; ...]</span><br><span class="line"></span><br><span class="line">    使用将分配给脚本中的替代变量的指定参数</span><br><span class="line">    从 Web 服务器 (URL) 或本地文件系统 (filename.ext)</span><br><span class="line">    运行指定的 SQL*Plus 脚本。</span><br><span class="line"></span><br><span class="line">在启动 SQL*Plus 并且执行 CONNECT 命令后, 将运行站点概要</span><br><span class="line">文件 (例如, $ORACLE_HOME/sqlplus/admin/glogin.sql) 和用户概要文件</span><br><span class="line">(例如, 工作目录中的 login.sql)。这些文件</span><br><span class="line">包含 SQL*Plus 命令。</span><br><span class="line"></span><br><span class="line">有关详细信息, 请参阅 SQL*Plus 用户指南和参考。</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;</span><br></pre></td></tr></table></figure>

<h3 id="创建用户名和表"><a href="#创建用户名和表" class="headerlink" title="创建用户名和表"></a>创建用户名和表</h3>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合MyBatis</title>
    <url>/2019/11/22/SpringBoot%E6%95%B4%E5%90%88mybatis/</url>
    <content><![CDATA[<h2 id="SpringBoot整合MyBatis"><a href="#SpringBoot整合MyBatis" class="headerlink" title="SpringBoot整合MyBatis"></a>SpringBoot整合MyBatis</h2><p>今天写spring boot 整合mybatis的时候遇到 </p>
<h4 id="org-apache-ibatis-binding-BindingException-Invalid-bound-statement-not-found"><a href="#org-apache-ibatis-binding-BindingException-Invalid-bound-statement-not-found" class="headerlink" title="org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)"></a>org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)</h4><p>这个错，找了很久，总结原因是因为扫描不到xxxMapper.xml。</p>
<p>受到以前整个springMvc整合mybatis的影响，将文件放在了src/main/java下，导致一直扫描不到xxxMapper.xml文件。原因是：idea中maven打包的时候不会将xxxMapper.xml，所以target打包之后不会有xxxMapper.xml文件，所以一直扫描不到。</p>
<h3 id="目录结构："><a href="#目录结构：" class="headerlink" title="目录结构："></a>目录结构：</h3><h3 id="解决办法：将xxxMapper-xml文件放在了src-main-resources下，然后在application-properties文件中添加配置"><a href="#解决办法：将xxxMapper-xml文件放在了src-main-resources下，然后在application-properties文件中添加配置" class="headerlink" title="解决办法：将xxxMapper.xml文件放在了src/main/resources下，然后在application.properties文件中添加配置"></a>解决办法：将xxxMapper.xml文件放在了src/main/resources下，然后在application.properties文件中添加配置</h3><p> mybatis.mapper-locations=classpath:mappings/*.xml</p>
<h3 id="或者在application-yml文件中加入配置："><a href="#或者在application-yml文件中加入配置：" class="headerlink" title="或者在application.yml文件中加入配置："></a>或者在application.yml文件中加入配置：</h3><p> mybatis:<br>      mapper-locations: classpath:mappings/*.xml</p>
<p>还有一种办法是：</p>
<p>使用@Select、@Insert、@Update、@Delete注解代替xxxMapper.xml里面的内容，这样就不存在扫描xxxMapper.xml文件的问题了。<br>1<br>遇到org.apache.ibatis.binding.BindingException: Invalid bound statement(not found)这个问题可能还有其他原因，不过这些原因很容易排查。</p>
<p>xxxMapper.xml文件中的namespace对应有误<br>xxxMapper.java文件中没有对应的xxxMapper.xml中的方法。<br>记录一下，防止以后自己再采坑。：）<br>————————————————<br>版权声明：本文为CSDN博主「innerpeacez」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/zhwyj1019/article/details/79088073" target="_blank" rel="noopener">https://blog.csdn.net/zhwyj1019/article/details/79088073</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
        <tag>MyBatis</tag>
        <tag>Mapper</tag>
      </tags>
  </entry>
  <entry>
    <title>学长给你们的大学指南</title>
    <url>/2019/10/27/%E9%80%81%E7%BB%99%E5%A4%A7%E4%B8%80%E7%9A%84%E4%BD%A0%E4%BB%AC/</url>
    <content><![CDATA[<h2 id="开启美好的大学生活"><a href="#开启美好的大学生活" class="headerlink" title="开启美好的大学生活"></a>开启美好的大学生活</h2><h3 id="啰嗦前言"><a href="#啰嗦前言" class="headerlink" title="啰嗦前言"></a>啰嗦前言</h3><p>很荣幸受邀来参加咱系的新老生交流会，其实我挺愿意参加这种会的，并不是为了展示啥我有多厉害，多牛，而是在这个会中能够让学弟学妹们感受一下咱系的优秀种子选手们都是啥样的，感受一下学长学姐们的大学，树立一个正确的前进方向，看看学姐们都是怎么过来的，对比一下自己。学弟们不要被网游啥的所耽误，学妹们应该还好些，但是从我们专业的女生来看，大多数都知道努力，但是什么都很认真，学妹们，说真的，该认真认真，不该认真就差不多就行，把更多精力放在你想走的那条路上，或者你觉得你有比这更重要，更有意义的事。比如上心理健康教育课，思修课，你觉得除了听应该还可以干点别的，把英语、高数作业写了，学弟们研究一下C语言编程题，到时候你就会发现，这些课能干很多东西，哈哈哈，其实我就是一直这么干的，我觉得这样挺好的，起码别人写作业，我就完成了。这就是一个可以利用时间的小方法，我希望通过这次的交流会让大家能够树立起一个正确的前进方向，能够拥有一个充实的大学生活，我想哪怕有一个人听我叨叨半天，能够真正的收到了启发，找到了自己前行的路，那都是影响一生的事情，何乐而不为呢？我短短十五分钟的讲解，在台上我可能讲的不太全面，在这上面我就详细的给大家做一个总结，希望你们能够看完！</p>
<h3 id="我的入学规划"><a href="#我的入学规划" class="headerlink" title="我的入学规划"></a>我的入学规划</h3><p>在高考之后我就对自己的大学生活做了详细的规划，现在你们做也不晚，有句话，<strong>心之所向，素履以往，生如逆旅，一苇以航</strong>，想问啥意思自己去查哈,所以你现在还没有规划，那就先去规划一下，不要太大，只要你能办到就行，从前有一个朋友，和我说你的目标是什么？我说目标？我没有目标，因为我目标太多了，都是小目标，比如今晚要把作业写完，周三要在演讲比赛上更加出彩，下周的计算机技能大赛我要好好准备，一个月后我要干兼职赚1000，两个月后要怎样怎样，半年后怎样怎样，我的目标也在随着我的成长在变化，不断地革新，但是从没有偏移，一直是秉承着锻炼自己，提升自己为主要目标，大学短短四年，大学能体验很多你体验不到的东西，这其中的机会是你人生中能体验机会最多的，多去参加活动，比赛，竞技，别怕浪费时间，有些能力都是在不段的经历中慢慢展现出来的，到最后你都不知道我竟然有这项能力！！！</p>
<img class="lozad" title="我的规划" data-src="/2019/10/27/%E9%80%81%E7%BB%99%E5%A4%A7%E4%B8%80%E7%9A%84%E4%BD%A0%E4%BB%AC/%E8%A7%84%E5%88%92.jpg"> 



]]></content>
      <categories>
        <category>生活与你</category>
      </categories>
      <tags>
        <tag>送给大一的你们</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网大厂常考笔试题004-继承于组合的区别</title>
    <url>/2019/10/23/%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%A7%E5%8E%82%E5%B8%B8%E8%80%83%E7%AC%94%E8%AF%95%E9%A2%98004-%E7%BB%A7%E6%89%BF%E4%B8%8E%E7%BB%84%E5%90%88%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="互联网大厂常考笔试题004-继承于组合的区别"><a href="#互联网大厂常考笔试题004-继承于组合的区别" class="headerlink" title="互联网大厂常考笔试题004-继承于组合的区别"></a>互联网大厂常考笔试题004-继承于组合的区别</h2><p> 本文链接：<a href="https://blog.csdn.net/zymx14/article/details/79605926" target="_blank" rel="noopener">https://blog.csdn.net/zymx14/article/details/79605926</a> </p>
<h3 id="什么是继承"><a href="#什么是继承" class="headerlink" title="什么是继承"></a>什么是继承</h3><p>继承是面向对象三大基本特征之一(继承，封装，多态)，继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。在java中通过关键字extends实现继承，java中所有类默认都是java.lang.Object的子类。继承强调的是is-a关系。<br>直接通过例子来了解继承：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是动物 相当于父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breahing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"呼吸"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyingAnimals</span> <span class="title">extend</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flying</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"飞-----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        FlyingAnimals flyingAnimals=<span class="keyword">new</span> FlyAnimals();</span><br><span class="line">        flyingAnimals.breathing();</span><br><span class="line">        flyingAnimals.flying();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">呼吸</span><br><span class="line">飞-----</span><br></pre></td></tr></table></figure>

<p> 继承是代码复用的一种方式。在继承中，父类的方法内部实现细节对子类可见，是‘白盒式’的代码复用。 </p>
<h3 id="什么是组合"><a href="#什么是组合" class="headerlink" title="什么是组合"></a>什么是组合</h3><p>组合是通过 对现有对象进行拼装即组合产生新的具有更复杂的功能。如： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breahing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"呼吸"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 爬行动物</span></span><br><span class="line"><span class="comment"> * 组合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reptilia</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Animal animal;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Reptilia</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.animal = animal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">crawling</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"爬行..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breathing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        animal.breathing();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line">        Reptilia reptilia = <span class="keyword">new</span> Reptilia(animal);</span><br><span class="line">        reptilia.breathing();;</span><br><span class="line">        reptilia.crawling();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p>呼吸</p>
<p>爬行…</p>
<p> 组合体现的是整体和部分，强调的是has-a的关系。所以组合更多的用于下面这样的场景： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//轮胎</span><br><span class="line">class Tire&#123;</span><br><span class="line">public void run()&#123;</span><br><span class="line">	System.out.println(&quot;轮胎转动...&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">//灯</span><br><span class="line">class Light&#123;</span><br><span class="line">public void light()&#123;</span><br><span class="line">	System.out.println(&quot;灯亮...&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span></span>&#123;</span><br><span class="line"> <span class="keyword">private</span> Tire tire;</span><br><span class="line"> <span class="keyword">private</span> Light light;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Vehicle</span><span class="params">(Tire tire,Light light)</span></span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.tire=tire;</span><br><span class="line"> <span class="keyword">this</span>.light=light;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>&#123;</span><br><span class="line"> light.light();</span><br><span class="line"> tire.run();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"> Tire tire =<span class="keyword">new</span> Tire();</span><br><span class="line"> Light light=<span class="keyword">new</span> Light();</span><br><span class="line"> Vehicle vehicle=<span class="keyword">new</span> Vehicle(tire,light);</span><br><span class="line"> vehicle.operation();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<p>灯亮…</p>
<p>轮胎转动…</p>
<h3 id="继承与组合的区别与联系"><a href="#继承与组合的区别与联系" class="headerlink" title="继承与组合的区别与联系"></a>继承与组合的区别与联系</h3><p>继承与组合都是面向对象中代码复用的方式。父类的内部细节对子类可见，其代码属于白盒式的复用，而组合中，对象之间的内部细节不可见，其代码属于黑盒式复用。继承在编码过程中就要指定具体的父类，其关系在编译期就确定，而组合的关系一般在运行时确定。继承强调的是is-a的关系，而组合强调的是has-a的关系。</p>
<h3 id="继承与组合的优缺点"><a href="#继承与组合的优缺点" class="headerlink" title="继承与组合的优缺点"></a>继承与组合的优缺点</h3><h5 id="继承的优缺点"><a href="#继承的优缺点" class="headerlink" title="继承的优缺点"></a>继承的优缺点</h5><h6 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h6><p>支持扩展，通过继承父类实现，但会使系统结构较复杂<br>易于修改被复用的代码</p>
<h6 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h6><p>代码白盒复用，父类的实现细节暴露给子类，破坏了封装性<br>当父类的实现代码修改时，可能使得子类也不得不修改，增加维护难度。<br>子类缺乏独立性，依赖于父类，耦合度较高<br>不支持动态拓展，在编译期就决定了父类</p>
<h5 id="组合的优缺点"><a href="#组合的优缺点" class="headerlink" title="组合的优缺点"></a>组合的优缺点</h5><h6 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h6><p>代码黑盒复用，被包括的对象内部实现细节对外不可见，封装性好。<br>整体类与局部类之间松耦合，相互独立。<br>支持扩展<br>每个类只专注于一项任务<br>支持动态扩展，可在运行时根据具体对象选择不同类型的组合对象(扩展性比继承好)</p>
<h6 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h6><p>创建整体类对象时，需要创建所有局部类对象。导致系统对象很多。<br>什么情况下使用继承，什么情况下使用组合<br>从前面的分析看，组合的优点明显多于继承，再加上java中仅支持单继承，所以：<br>除非两个类之间是is-a的关系，否则尽量使用组合。<br>// <a href="https://blog.csdn.net/zymx14/article/details/79605926" target="_blank" rel="noopener">https://blog.csdn.net/zymx14/article/details/79605926</a></p>
]]></content>
      <categories>
        <category>面试笔试</category>
      </categories>
      <tags>
        <tag>面试笔试</tag>
        <tag>java</tag>
        <tag>继承与组合的区别</tag>
      </tags>
  </entry>
  <entry>
    <title>关于学生总成绩排名问题及Collections使用</title>
    <url>/2019/10/22/%E5%85%B3%E4%BA%8E%E5%AD%A6%E7%94%9F%E6%80%BB%E6%88%90%E7%BB%A9%E6%8E%92%E5%90%8D%E9%97%AE%E9%A2%98%E5%8F%8ACollections%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="关于学生总成绩排名问题及Collections使用"><a href="#关于学生总成绩排名问题及Collections使用" class="headerlink" title="关于学生总成绩排名问题及Collections使用"></a>关于学生总成绩排名问题及Collections使用</h2><p>写一个项目真是存在很多的bug,修复的时间往往比开发所需要的时间更长，今天又出了一个bug,在这里记录一下，主要是针对系统中学生的成绩排名。</p>
<h4 id="出现的问题是当管理员对成绩进行删除操作的时候排名不会变化"><a href="#出现的问题是当管理员对成绩进行删除操作的时候排名不会变化" class="headerlink" title="出现的问题是当管理员对成绩进行删除操作的时候排名不会变化"></a>出现的问题是当管理员对成绩进行删除操作的时候排名不会变化</h4><p>因为成绩是以Excel表格的形式进行导入的，在导入的同时对里面的成绩进行汇总和排序，在排序上分别对学生成绩的班级进行排名和全校名次进行排名，排名的关键点就是考试的批次，这么说可能有点笼统，下面举个栗子：</p>
<p> <img alt="img" data-src="https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&quality=100&size=b4000_4000&sec=1571755425&di=89f9186748746fae06a09b354579d8ed&src=http://himg2.huanqiu.com/attachment2010/2017/0411/20170411011851880.jpg" class="lozad"> </p>
<h6 id="栗子："><a href="#栗子：" class="headerlink" title="栗子："></a>栗子：</h6><p>成绩由管理员和教师进行上传，上传的同时教师选择考试批次：第一次模拟考试 ，选择班主任，选择Excel文件，然后点击导入。对于导入文件功能等过几天我在发布上来。</p>
 <img class="lozad" title="This is an example image" data-src="/2019/10/22/%E5%85%B3%E4%BA%8E%E5%AD%A6%E7%94%9F%E6%80%BB%E6%88%90%E7%BB%A9%E6%8E%92%E5%90%8D%E9%97%AE%E9%A2%98%E5%8F%8ACollections%E4%BD%BF%E7%94%A8/1571755614542.png"> 

<p>在后台就是</p>
 <img class="lozad" title="This is an example image" data-src="/2019/10/22/%E5%85%B3%E4%BA%8E%E5%AD%A6%E7%94%9F%E6%80%BB%E6%88%90%E7%BB%A9%E6%8E%92%E5%90%8D%E9%97%AE%E9%A2%98%E5%8F%8ACollections%E4%BD%BF%E7%94%A8/1571756051728.png"> 

<p>在这里可以看到考试批次的eid编号，所以在排序的时候sql语句加一个where值为eid，根据考试批次进行班级和全校的排名。</p>
<h4 id="以区域排名为例"><a href="#以区域排名为例" class="headerlink" title="以区域排名为例"></a>以区域排名为例</h4><pre><code>Control
//区域排名
    List&lt;Score&gt; listAllR = scoreService.findRegionalranking(eid);//获取学生的班级排名
    if(listAllR==null||listAllR.equals(&quot;&quot;)){
        String failurl=request.getContextPath()+&quot;/ScoreServlet?action=adm_findAllScore&quot;;
        String msg = &quot;&lt;script&gt;window.alert(&apos;该考试批次已不存在相关学生成绩！&apos;);window.location.href=&apos;&quot;+failurl+&quot;&apos;;&lt;/script&gt;&quot;;
        request.setAttribute(&quot;msg&quot;, msg);
        request.getRequestDispatcher(&quot;msg.jsp&quot;).forward(request, response);    
    }else{
        Collections.sort(listAllR);//将数据库查询的数组进行排序
        for (int i = 0; i &lt;listAllR.size(); i++) {
            listAllR.get(i).setRegionalranking(i+1+&quot;&quot;);
            scoreService.updateRegionalranking(listAllR.get(i));
        }
    }</code></pre><h3 id="Collections-中有一个方法叫做sort可以对集合中的内容进行排序"><a href="#Collections-中有一个方法叫做sort可以对集合中的内容进行排序" class="headerlink" title="Collections 中有一个方法叫做sort可以对集合中的内容进行排序"></a>Collections 中有一个方法叫做sort可以对集合中的内容进行排序</h3><p> static void sort(List list)： 对集合中的内容进行排序</p>
<p>要使用这个sort方法进行排序的集合，里面的泛型必须实现Comparable接口</p>
<p>实现这个接口的对象才具备排序的功能， 这种排序自然排序。</p>
<p>口诀：<br>升序就是我减他，降续就是他减我</p>
<p>想要在哪个对象中使用就要继承Comparable接口</p>
 <img class="lozad" title="This is an example image" data-src="/2019/10/22/%E5%85%B3%E4%BA%8E%E5%AD%A6%E7%94%9F%E6%80%BB%E6%88%90%E7%BB%A9%E6%8E%92%E5%90%8D%E9%97%AE%E9%A2%98%E5%8F%8ACollections%E4%BD%BF%E7%94%A8/1571757435627.png"> 

<p>与此同时我们按照降序排列</p>
<img class="lozad" title="This is an example image" data-src="/2019/10/22/%E5%85%B3%E4%BA%8E%E5%AD%A6%E7%94%9F%E6%80%BB%E6%88%90%E7%BB%A9%E6%8E%92%E5%90%8D%E9%97%AE%E9%A2%98%E5%8F%8ACollections%E4%BD%BF%E7%94%A8/1571757402288.png"> 

<p>然后调用scoreService.updateRegionalranking(listAllR.get(i));这个方法，将请求送到Dao，最后修改排名。</p>
<h3 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h3><p>未删除成绩前界面如下：</p>
<img class="lozad" title="This is an example image" data-src="/2019/10/22/%E5%85%B3%E4%BA%8E%E5%AD%A6%E7%94%9F%E6%80%BB%E6%88%90%E7%BB%A9%E6%8E%92%E5%90%8D%E9%97%AE%E9%A2%98%E5%8F%8ACollections%E4%BD%BF%E7%94%A8/1571757792968.png"> 

<p>点击删除乔峰，木婉清就变成了第一名，效果如下</p>
<img class="lozad" title="This is an example image" data-src="/2019/10/22/%E5%85%B3%E4%BA%8E%E5%AD%A6%E7%94%9F%E6%80%BB%E6%88%90%E7%BB%A9%E6%8E%92%E5%90%8D%E9%97%AE%E9%A2%98%E5%8F%8ACollections%E4%BD%BF%E7%94%A8/1571757871623.png"> 

<p>总之，还是很烦返修程序的，但是程序都是在不断的探索中逐步强化，自身的能力也是一样，写到这里了，睡觉去，猪儿说不能熬夜！❤</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>排名</tag>
        <tag>Collections</tag>
        <tag>猪儿</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网大厂常考笔试题003-overload与override的区别</title>
    <url>/2019/10/22/%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%A7%E5%8E%82%E5%B8%B8%E8%80%83%E7%AC%94%E8%AF%95%E9%A2%98003-overload%E4%B8%8Eoverride%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="互联网大厂常考笔试题003-overload与override的区别"><a href="#互联网大厂常考笔试题003-overload与override的区别" class="headerlink" title="互联网大厂常考笔试题003-overload与override的区别"></a>互联网大厂常考笔试题003-overload与override的区别</h2><p>本文链接：<a href="https://blog.csdn.net/scau_lth/article/details/83413082" target="_blank" rel="noopener">https://blog.csdn.net/scau_lth/article/details/83413082</a></p>
<h6 id="Override：重写-Overload：重载"><a href="#Override：重写-Overload：重载" class="headerlink" title="Override：重写                                Overload：重载"></a>Override：重写                                Overload：重载</h6><p>这两者之间的区别在很多Java的面试笔试中都会经常被问到，下面我就捋一下他们的区别。</p>
<p>重写(Override)也称覆盖，它是父类与子类之间多态性的一种表现，而重载(Overload)是一个类中多态性的一种表现。</p>
<p>override从字面就可以知道，它是覆盖了一个方法并且对其重写，以求达到不同的作用。overload它是指我们可以定义一些名称相同的方法，通过定义不同的输入参数来区分这些方法，然后再调用时，虚拟机就会根据不同的参数样式，来选择合适的方法执行。</p>
<h2 id="override（重写，覆盖）"><a href="#override（重写，覆盖）" class="headerlink" title="override（重写，覆盖）"></a>override（重写，覆盖）</h2><p>（1）方法名、参数、返回值相同。<br>（2）子类方法不能缩小父类方法的访问权限。<br>（3）子类方法不能抛出比父类方法更多的异常(但子类方法可以不抛出异常)。<br>（4）存在于父类和子类之间。<br>（5）方法被定义为final不能被重写。<br>（6）被覆盖的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。</p>
<h2 id="overload（重载，过载）"><a href="#overload（重载，过载）" class="headerlink" title="overload（重载，过载）"></a>overload（重载，过载）</h2><p>（1）参数类型、个数、顺序至少有一个不相同。<br>（2）不能重载只有返回值不同的方法名。<br>（3）针对于一个类而言。<br>（4）不能通过访问权限、返回类型、抛出的异常进行重载；<br>（5）方法的异常类型和数目不会对重载造成影响。</p>
<h2 id="override应用"><a href="#override应用" class="headerlink" title="override应用"></a>override应用</h2><p>（1）最熟悉的覆盖就是对接口方法的实现，在接口中一般只是对方法进行了声明，而我们在实现时，就需要实现接口声明的所有方法。<br>（2）除了这个典型的用法以外，我们在继承中也可能会在子类覆盖父类中的方法。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>override是在不同类之间的行为，overload是在同一个类中的行为。</p>
<p>overload的方法可以改变返回值的类型，因为它与返回值类型无关。</p>
]]></content>
      <categories>
        <category>面试笔试</category>
      </categories>
      <tags>
        <tag>面试笔试</tag>
        <tag>java</tag>
        <tag>overload与override的区别</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网大厂常考笔试题002-final的作用</title>
    <url>/2019/10/22/%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%A7%E5%8E%82%E5%B8%B8%E8%80%83%E7%AC%94%E8%AF%95%E9%A2%98002-final%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
    <content><![CDATA[<p>今天讲一下final关键字的作用，final关键字可用于三个地方，一个作用是修饰类、一个作用是修饰类属性、一个作用是修饰类方法。</p>
<p> 被final关键字修饰的类不能被继承，被final关键字修饰的类属性和类方法不能被覆盖（重写）。</p>
<p>   对于被final关键字修饰的类属性而言，子类就不能给他重新赋值了，如果重新赋值，会报错：</p>
<img class="lozad" title="This is an image" data-src="/2019/10/22/%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%A7%E5%8E%82%E5%B8%B8%E8%80%83%E7%AC%94%E8%AF%95%E9%A2%98002-final%E7%9A%84%E4%BD%9C%E7%94%A8/20171011122829016.png"> 

<p>下图所示，当我们直接给name赋值时，因为父类中的name属性被final修饰，所以eclipse会报错。但是这里有一个特别容易混淆的地方：</p>
<img class="lozad" title="This is an example image" data-src="/2019/10/22/%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%A7%E5%8E%82%E5%B8%B8%E8%80%83%E7%AC%94%E8%AF%95%E9%A2%98002-final%E7%9A%84%E4%BD%9C%E7%94%A8/20171011123208548.png"> 



<p>请注意，我们在name之前加上了一个String关键字，其结果是从新发定义了一个变量，虽然变量名都是name，但是在内存中占用的区域却不同，所以不与之冲突，不会报错。</p>
<p>接下来是在类方法前加上final关键字的用法。与类属性类似，父类方法如果用final关键字进行修饰，那么不能被覆盖，但要说明一点的是，不能被重写是指不能同时和和父类方法同名，同参数，换句话讲，只要子类中的方法与父类中的方法同名，同参数列表，即使返回值不同，仍然是属于重写的范畴：</p>
<img class="lozad" title="This is an example image" data-src="/2019/10/22/%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%A7%E5%8E%82%E5%B8%B8%E8%80%83%E7%AC%94%E8%AF%95%E9%A2%98002-final%E7%9A%84%E4%BD%9C%E7%94%A8/20171011125023189.png"> 

<p>这里的子类方法报错，是因为他与父类中的print方法同名同参数，即使他们返回值不同，但仍然是属于重写的范畴。所以这里有一个小结论：</p>
<p>重写：只要子类方法与父类方法同名同参数就是重写。</p>
]]></content>
      <categories>
        <category>面试笔试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试笔试</tag>
        <tag>笔试final的作用</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网大厂常考笔试题001-static的作用</title>
    <url>/2019/10/21/%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%A7%E5%8E%82%E5%B8%B8%E8%80%83%E7%AC%94%E8%AF%95%E9%A2%98001-static%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
    <content><![CDATA[<p>今天摘选了一些著名互联网企业的一些Java面试笔试真题以及考察知识点，以便提供读者参考。</p>
<h2 id="static的作用"><a href="#static的作用" class="headerlink" title="static的作用"></a>static的作用</h2><p>static关键字有以下三种使用方法：</p>
<p>1.被static修饰的变量属于静态变量，类变量，可以通过类名，变量名直接引用，不需要进行new一个新类。</p>
<p>2.被static修饰的方法属于静态方法，类方法，可以通过类名，方法名直接引用，而不需要new出来一个对象</p>
<p>3.静态块，用于初始化一个类的时候进行一些操作，静态变量、静态方法和静态代码块都只执行一次，而且只在初始化的时候执行。</p>
<h6 id="首先静态变量："><a href="#首先静态变量：" class="headerlink" title="首先静态变量："></a>首先静态变量：</h6><p> 静态变量被所有变量所共享，在内存中只存在一种副本，只在（当且仅当）类初次加载时被初始化，生命周期边长，只有程序结束才能够被销毁。而非静态变量是单个对象所拥有的，存在多个副本，各个对象之间副本互不影响。</p>
<h6 id="其次静态方法："><a href="#其次静态方法：" class="headerlink" title="其次静态方法："></a>其次静态方法：</h6><p>静态方法是所有类都能够调用和共同存在的方法，由于静态方法不依赖于任何对象就可以进行访问，因此对于静态方法来说，是没有this的，因为this表示是当前对象，因为它不依附于任何对象，既然都没有对象，就谈不上this了。 并且由于这个特性，在静态方法中不能访问类的非静态成员变量和非静态成员方法，因为非静态成员方法/变量都是必须依赖具体的对象才能够被调用。 最大的作用就是可以”类名.方法名”调用该方法。但是在实际开发中也少用到该方式，因为一是static修饰后的方法资源共享，在多线程场景不安全。二是静态资源常驻内存，很难被回收， </p>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p> 被static修饰的变量和被static修饰的方法统一属于类的<strong>静态资源，是类实例之间共享的，换言之，一处变、处处变</strong>。 </p>
<h6 id="最后是静态块"><a href="#最后是静态块" class="headerlink" title="最后是静态块:"></a>最后是静态块:</h6><p>static修饰静态块后，将要修饰的成员同一放在一个static中。该静态化会在第一次使用类时，最先初始化static修饰的静态块。并且在程序运行过程中，只需要初始化一次，不会进行多次初始化。以下代码是静态代码块以流的模式获取test.properties文件内容。链接 <a href="https://blog.csdn.net/chengly0129/article/details/49493297" target="_blank" rel="noopener">https://blog.csdn.net/chengly0129/article/details/49493297</a> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">  Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">  InputStream in = Object.class.getResourceAsStream(<span class="string">"/test.properties"</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    prop.load(in);</span><br><span class="line">    param1 = prop.getProperty(<span class="string">"initYears1"</span>).trim();</span><br><span class="line">    param2 = prop.getProperty(<span class="string">"initYears2"</span>).trim();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么我们思考，为什么 JDK把不同的静态资源放在了不同的类中而不把所有静态资源放在一个类里面，很多人可能想当然认为当然要这么做，但是是否想过为什么要这么做呢？个人认为主要有三个好处： </p>
<p>1、不同的类有自己的静态资源，这可以实现静态资源分类。比如和数学相关的静态资源放在java.lang.Math中，和日历相关的静态资源放在java.util.Calendar中，这样就很清晰了</p>
<p>2、避免重名。不同的类之间有重名的静态变量名、静态方法名也是很正常的，如果所有的都放在一起不可避免的一个问题就是名字重复，这时候怎么办？分类放置就好了。</p>
<p>3、避免静态资源类无限膨胀，这很好理解。</p>
<p> OK，再微微深入一下，也是有些人容易混淆的一个问题：静态方法能不能引用非静态资源？静态方法里面能不能引用静态资源？非静态方法里面能不能引用静态资源？比如就以这段代码为例，是否有错？ </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">2 </span>&#123;</span><br><span class="line"><span class="number">3</span>     <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="number">4</span>     </span><br><span class="line"><span class="number">5</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">6     </span>&#123;</span><br><span class="line"><span class="number">7</span>         i = <span class="number">1</span>;</span><br><span class="line"><span class="number">8</span>     &#125;</span><br><span class="line"><span class="number">9</span> &#125;</span><br></pre></td></tr></table></figure>

<p>当然有错，在第7行的地方。不妨这么思考这个问题：</p>
<p>静态资源属于类，但是是独立于类存在的。从JVM的类加载机制的角度讲，<strong>静态资源是类初始化的时候加载的，而非静态资源是类new的时候加载的</strong>。类的初始化早于类的new，比如Class.forName(“xxx”)方法，就是初始化了一个类，但是并没有new它，只是加载这个类的静态资源罢了。所以对于静态资源来说，它是不可能知道一个类中有哪些非静态资源的；但是对于非静态资源来说就不一样了，由于它是new出来之后产生的，因此属于类的这些东西它都能认识。所以上面的几个问题答案就很明确了：</p>
<p>1、静态方法能不能引用非静态资源？不能，new的时候才会产生的东西，对于初始化后就存在的静态资源来说，根本不认识它。</p>
<p>2、静态方法里面能不能引用静态资源？可以，因为都是类初始化的时候加载的，大家相互都认识。</p>
<p>3、非静态方法里面能不能引用静态资源？可以，非静态方法就是实例方法，那是new之后才产生的，那么属于类的内容它都认识。</p>
]]></content>
      <categories>
        <category>面试笔试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试笔试</tag>
        <tag>笔试题static的作用</tag>
      </tags>
  </entry>
  <entry>
    <title>由于一个“ 引发的事故</title>
    <url>/2019/10/20/error001/</url>
    <content><![CDATA[<p>前阵子在写程序的时候出现了这么一个错误：<br>org.apache.jasper.JasperException: /WEB-INF/pages/accessory/accessoryHome.jsp(1,61) quote symbol expected</p>
<p>错误代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;c:when <span class="built_in">test</span>=<span class="variable">$&#123;page.page==1 &#125;</span>&gt;</span><br><span class="line">          &lt;li class=<span class="string">"active"</span>&gt;&lt;a href=<span class="string">"javascript:void();"</span> title=<span class="string">"首页"</span>&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/c:when&gt;</span><br></pre></td></tr></table></figure>
<p>quote symbol expected：quote symbol就是引号,expected就是期待连起来就是我代码少写引号了；</p>
<p>正确代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;c:when <span class="built_in">test</span>=<span class="variable">$&#123;"page.page==1" &#125;</span>&gt;</span><br><span class="line">   &lt;li class=<span class="string">"active"</span>&gt;&lt;a href=<span class="string">"javascript:void();"</span> title=<span class="string">"首页"</span>&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/c:when&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>错误集锦</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Exception</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>张某人技术交流站</title>
    <url>/2019/10/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
